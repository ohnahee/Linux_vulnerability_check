#!/bin/bash

# U-05 점검
check_U05() {
    echo "=========================="
    echo "U-05 (상)"
    echo "점검 사항: PATH 환경 변수에 현재 디렉토리(.) 포함 여부 점검"
    echo "=========================="

    result="양호"
    reason="PATH 환경 변수에 현재 디렉토리 (.)가 포함되어 있지 않습니다."
    current_path=$(echo $PATH)
    dot_in_path=$(echo $current_path | grep -E '(^\.|:\.:|:/\.)')

    if [ -n "$dot_in_path" ]; then
        result="취약"
        reason="PATH 환경 변수에 현재 디렉토리 (.)가 포함되어 있습니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-06 점검
check_U06() {
    echo "=========================="
    echo "U-06 (상)"
    echo "점검 사항: 시스템에 소유자가 존재하지 않는 파일이나 디렉터리 여부 점검"
    echo "=========================="

    result="양호"
    reason="시스템에 소유자가 존재하지 않는 파일이나 디렉터리가 없습니다."
    orphans=$(sudo find / -nouser -o -nogroup 2>/dev/null)

    if [ -n "$orphans" ]; then
        result="취약"
        reason="시스템에 소유자가 존재하지 않는 파일이나 디렉터리가 있습니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    if [ "$result" = "취약" ]; then
        echo "소유자가 존재하지 않는 파일 및 디렉터리 목록:"
        echo "$orphans"
    fi
    echo
}

# U-07 점검
check_U07() {
    echo "=========================="
    echo "U-07 (상)"
    echo "점검 사항: /etc/passwd 파일의 소유자 및 권한 점검"
    echo "=========================="

    result="양호"
    reason="/etc/passwd 파일의 소유자가 root이고 권한이 644 이하입니다."
    owner=$(stat -c %U /etc/passwd)
    permissions=$(stat -c %a /etc/passwd)

    if [ "$owner" != "root" ]; then
        result="취약"
        reason="/etc/passwd 파일의 소유자가 root가 아닙니다."
    fi

    if [ "$permissions" -ne 644 ]; then
        result="취약"
        reason="/etc/passwd 파일의 권한이 644 이하가 아닙니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    if [ "$result" = "취약" ]; then
        echo "상세 정보:"
        if [ "$owner" != "root" ]; then
            echo " /etc/passwd 파일의 소유자가 $owner 입니다."
        fi
        if [ "$permissions" -ne 644 ]; then
            echo " /etc/passwd 파일의 권한이 $permissions 입니다."
        fi
    fi
    echo
}

# U-08 점검
check_U08() {
    echo "=========================="
    echo "U-08 (상)"
    echo "점검 사항: /etc/shadow 파일의 소유자 및 권한 점검"
    echo "=========================="

    result="양호"
    reason="/etc/shadow 파일의 소유자가 root이고 권한이 400입니다."
    owner=$(stat -c %U /etc/shadow)
    permissions=$(stat -c %a /etc/shadow)

    if [ "$owner" != "root" ]; then
        result="취약"
        reason="/etc/shadow 파일의 소유자가 root가 아닙니다."
    fi

    if [ "$permissions" != "400" ]; then
        result="취약"
        reason="/etc/shadow 파일의 권한이 400가 아닙니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    if [ "$result" = "취약" ]; then
        echo "상세 정보:"
        if [ "$owner" != "root" ]; then
            echo " /etc/shadow 파일의 소유자가 $owner 입니다."
        fi
        if [ "$permissions" != "400" ]; then
            echo " /etc/shadow 파일의 권한이 $permissions 입니다."
        fi
    fi
    echo
}

# U-09 점검
check_U09() {
    echo "=========================="
    echo "U-09 (상)"
    echo "점검 사항: /etc/hosts 파일의 소유자 및 권한 점검"
    echo "=========================="

    result="양호"
    reason="/etc/hosts 파일의 소유자가 root이고 권한이 600 이하입니다."
    owner=$(stat -c %U /etc/hosts)
    permissions=$(stat -c %a /etc/hosts)

    if [ "$owner" != "root" ]; then
        result="취약"
        reason="/etc/hosts 파일의 소유자가 root가 아닙니다."
    fi

    if [ "$permissions" -gt 600 ]; then
        result="취약"
        reason="/etc/hosts 파일의 권한이 600을 초과합니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    if [ "$result" = "취약" ]; then
        echo "상세 정보:"
        if [ "$owner" != "root" ]; then
            echo " /etc/hosts 파일의 소유자가 $owner 입니다."
        fi
        if [ "$permissions" -gt 600 ]; then
            echo " /etc/hosts 파일의 권한이 $permissions 입니다."
        fi
    fi
    echo
}

# U-10 점검
check_U10() {
    echo "=========================="
    echo "U-10 (상)"
    echo "점검 사항: /etc/inetd.conf 또는 /etc/xinetd.conf 파일의 소유자 및 권한 점검"
    echo "=========================="

    files=("/etc/inetd.conf" "/etc/xinetd.conf")
    result="양호"
    reason="모든 점검 파일의 소유자가 root이고 권한이 600입니다."
    files_checked=false

    check_file() {
        local file=$1
        if [ -e "$file" ]; then
            files_checked=true
            local owner=$(stat -c %U "$file")
            local permissions=$(stat -c %a "$file")

            if [ "$owner" != "root" ]; then
                result="취약"
                reason="$file 파일의 소유자가 root가 아닙니다."
            fi

            if [ "$permissions" -ne "600" ]; then
                result="취약"
                reason="$file 파일의 권한이 600이 아닙니다. (현재 권한: $permissions)"
            fi

            echo "$file 소유자: $owner, 권한: $permissions"
        else
            echo "$file 파일이 존재하지 않습니다."
        fi
    }

    for file in "${files[@]}"; do
        check_file "$file"
    done

    if [ "$files_checked" = false ]; then
        echo "※ 점검 결과: /etc/inetd.conf 또는 /etc/xinetd.conf 파일이 시스템에 존재하지 않습니다."
    fi
    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-11 점검
check_U11() {
    echo "=========================="
    echo "U-11 (상)"
    echo "점검 사항: 구성 파일의 소유자 및 권한 점검"
    echo "=========================="

    files=(
        "/etc/rsyslog.conf"
        "/etc/systemd/journald.conf"
        "/etc/rsyslog.d"
        "/var/log/journal"
    )
    result="양호"
    reason="모든 점검 파일의 소유자가 root이고 권한이 640입니다."

    check_file() {
        local file=$1
        if [ -e "$file" ]; then
            local owner=$(stat -c %U "$file")
            local permissions=$(stat -c %a "$file")

            if [ "$owner" != "root" ]; then
                result="취약"
                reason="$file 파일의 소유자가 root가 아닙니다."
            fi

            if [ "$permissions" -ne "640" ]; then
                result="취약"
                reason="$file 파일의 권한이 640이 아닙니다. (현재 권한: $permissions)"
            fi

            echo "$file 소유자: $owner, 권한: $permissions"
        else
            echo "$file 파일이 존재하지 않습니다."
        fi
    }

    for file in "${files[@]}"; do
        check_file "$file"
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-12 점검
check_U12() {
    echo "=========================="
    echo "U-12 (상)"
    echo "점검 사항: /etc/services 파일의 소유자 및 권한 점검"
    echo "=========================="

    file="/etc/services"
    result="양호"
    reason="/etc/services 파일의 소유자가 root, bin, sys 중 하나이고 권한이 644 이하입니다."

    check_file() {
        if [ -e "$file" ]; then
            local owner=$(stat -c %U "$file")
            local permissions=$(stat -c %a "$file")

            if [[ "$owner" != "root" && "$owner" != "bin" && "$owner" != "sys" ]]; then
                result="취약"
                reason="$file 파일의 소유자가 root, bin, sys 중 하나가 아닙니다. (현재 소유자: $owner)"
            fi

            if [ "$permissions" -gt "644" ]; then
                result="취약"
                reason="$file 파일의 권한이 644 이하가 아닙니다. (현재 권한: $permissions)"
            fi

            echo "$file 소유자: $owner, 권한: $permissions"
        else
            echo "$file 파일이 존재하지 않습니다."
            result="취약"
            reason="/etc/services 파일이 존재하지 않습니다."
        fi
    }

    check_file "$file"

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-13 점검
check_U13() {
    echo "=========================="
    echo "U-13 (상)"
    echo "점검 사항: SUID 및 SGID 비트가 설정된 파일 점검"
    echo "=========================="

    result="양호"
    reason="SUID 및 SGID 비트가 설정된 파일의 소유자가 root이고 권한이 755 이하이며 시스템 디렉토리 내에 위치합니다."
    safe_dirs=("/bin" "/sbin" "/usr/bin" "/usr/sbin" "/lib" "/lib64" "/usr/lib" "/usr/lib64")

    check_file() {
        local file=$1
        local owner=$(stat -c %U "$file")
        local permissions=$(stat -c %a "$file")
        local directory=$(dirname "$file")

        if [ "$owner" != "root" ]; then
            result="취약"
            reason="$file 파일의 소유자가 root가 아닙니다. (현재 소유자: $owner)"
        fi

        if [ "$permissions" -gt 755 ]; then
            result="취약"
            reason="$file 파일의 권한이 755 이하가 아닙니다. (현재 권한: $permissions)"
        fi

        local safe=false
        for dir in "${safe_dirs[@]}"; do
            if [[ "$directory" == "$dir"* ]]; then
                safe=true
                break
            fi
        done

        if [ "$safe" = false ]; then
            result="취약"
            reason="$file 파일이 시스템 디렉토리 외의 위치에 있습니다. (현재 위치: $directory)"
        fi

        echo "$file 소유자: $owner, 권한: $permissions, 위치: $directory"
    }

    find / \( -perm -4000 -o -perm -2000 \) -type f 2>/dev/null | while read -r file; do
        check_file "$file"
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-14 점검
check_U14() {
    echo "=========================="
    echo "U-14 (상)"
    echo "점검 사항: 홈 디렉터리 내 환경변수 파일의 소유자 및 접근 권한 점검"
    echo "=========================="

    env_files=(".profile" ".kshrc" ".cshrc" ".bashrc" ".bash_profile" ".login" ".exrc" ".netrc")
    home_dirs=$(cat /etc/passwd | grep -E '/home|/root' | awk -F: '{print $6}')
    result="양호"
    reason="모든 환경변수 파일의 소유자 및 권한이 적절하게 설정되어 있습니다."

    check_file() {
        local file=$1
        local home_dir=$2
        if [ -e "$home_dir/$file" ]; then
            local owner=$(stat -c %U "$home_dir/$file")
            local permissions=$(stat -c %a "$home_dir/$file")

            if [ "$owner" != "$(basename $home_dir)" ] && [ "$owner" != "root" ]; then
                echo "$home_dir/$file 파일의 소유자가 root 또는 해당 계정이 아닙니다. (현재 소유자: $owner)"
                result="취약"
                reason="일부 환경변수 파일의 소유자가 root 또는 해당 계정이 아닙니다."
            fi

            if [ $(($permissions % 10)) -ge 2 ]; then
                echo "$home_dir/$file 파일에 root와 소유자 외에 쓰기 권한이 부여되어 있습니다. (현재 권한: $permissions)"
                result="취약"
                reason="일부 환경변수 파일에 root와 소유자 외에 쓰기 권한이 부여되어 있습니다."
            fi

            echo "$home_dir/$file 소유자: $owner, 권한: $permissions"
        fi
    }

    for home_dir in $home_dirs; do
        for file in "${env_files[@]}"; do
            check_file "$file" "$home_dir"
        done
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-15 점검
check_U15() {
    echo "=========================="
    echo "U-15 (상)"
    echo "점검 사항: 불필요한 world writable 파일 존재 여부 점검"
    echo "=========================="

    result="양호"
    reason="시스템 중요 파일에 world writable 파일이 존재하지 않습니다."
    world_writable_files=$(find / -type f -perm -0002 2>/dev/null)

    if [ -n "$world_writable_files" ]; then
        result="취약"
        reason="시스템 내에 불필요한 world writable 파일이 존재합니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"

    if [ "$result" = "취약" ]; then
        echo "world writable 파일 목록:"
        echo "$world_writable_files"
    fi
    echo
}

# U-16 점검
check_U16() {
    echo "=========================="
    echo "U-16 (상)"
    echo "점검 사항: 존재하지 않는 device 파일 존재 여부 점검"
    echo "=========================="

    result="양호"
    reason="/dev 디렉터리에 존재하지 않는 device 파일이 존재하지 않습니다."
    invalid_device_files=$(find /dev -type f ! -exec test -c {} \; -exec test -b {} \; -print 2>/dev/null)

    if [ -n "$invalid_device_files" ]; then
        result="취약"
        reason="/dev 디렉터리에 존재하지 않는 device 파일이 존재합니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"

    if [ "$result" = "취약" ]; then
        echo "존재하지 않는 device 파일 목록:"
        echo "$invalid_device_files"
    fi
    echo
}

# U-17 점검
check_U17() {
    echo "=========================="
    echo "U-17 (상)"
    echo "점검 사항: /etc/hosts.equiv 및 \$HOME/.rhosts 파일의 소유자 및 권한 점검"
    echo "=========================="

    files=("/etc/hosts.equiv" "$HOME/.rhosts")
    result="양호"
    reason="/etc/hosts.equiv 및 \$HOME/.rhosts 파일의 소유자가 root 또는 해당 계정이고 권한이 600 이하이며 '+' 설정이 없습니다."

    check_file() {
        local file=$1
        if [ -e "$file" ]; then
            local owner=$(stat -c %U "$file")
            local permissions=$(stat -c %a "$file")

            if [[ "$file" == "/etc/hosts.equiv" && "$owner" != "root" ]]; then
                result="취약"
                reason="$file 파일의 소유자가 root가 아닙니다. (현재 소유자: $owner)"
            elif [[ "$file" != "/etc/hosts.equiv" && "$owner" != "$(whoami)" ]]; then
                result="취약"
                reason="$file 파일의 소유자가 $(whoami) 계정이 아닙니다. (현재 소유자: $owner)"
            fi

            if [ "$permissions" -gt 600 ]; then
                result="취약"
                reason="$file 파일의 권한이 600 이하가 아닙니다. (현재 권한: $permissions)"
           

            fi

            if grep -q '+' "$file"; then
                result="취약"
                reason="$file 파일에 '+' 설정이 포함되어 있습니다."
            fi

            echo "$file 소유자: $owner, 권한: $permissions"
        else
            echo "$file 파일이 존재하지 않습니다."
        fi
    }

    for file in "${files[@]}"; do
        check_file "$file"
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-18 점검
check_U18() {
    echo "=========================="
    echo "U-18 (상)"
    echo "점검 사항: 허용할 호스트에 대한 접속 IP 주소 제한 및 포트 제한 설정 여부 점검"
    echo "=========================="

    tcp_wrapper_result="양호"
    iptables_result="양호"
    tcp_wrapper_reason="TCP Wrapper 설정이 적절하게 구성되어 있습니다."
    iptables_reason="IPtables 설정이 적절하게 구성되어 있습니다."

    tcp_wrapper_allow=$(cat /etc/hosts.allow 2>/dev/null)
    if [ -z "$tcp_wrapper_allow" ]; then
        tcp_wrapper_result="취약"
        tcp_wrapper_reason="/etc/hosts.allow 파일에 허용된 호스트 설정이 없습니다."
    fi

    tcp_wrapper_deny=$(cat /etc/hosts.deny 2>/dev/null)
    if [ -z "$tcp_wrapper_deny" ]; then
        tcp_wrapper_result="취약"
        tcp_wrapper_reason="/etc/hosts.deny 파일에 차단된 호스트 설정이 없습니다."
    fi

    iptables_rules=$(sudo iptables -L -n -v 2>/dev/null)
    if [ -z "$iptables_rules" ]; then
        iptables_result="취약"
        iptables_reason="IPtables 규칙이 설정되어 있지 않습니다."
    fi

    echo "=== TCP Wrapper 점검 결과: $tcp_wrapper_result ==="
    echo "이유: $tcp_wrapper_reason"
    echo ""
    echo "=== IPtables 점검 결과: $iptables_result ==="
    echo "이유: $iptables_reason"

    if [ "$tcp_wrapper_result" = "취약" ]; then
        echo "/etc/hosts.allow 설정:"
        echo "$tcp_wrapper_allow"
        echo ""
        echo "/etc/hosts.deny 설정:"
        echo "$tcp_wrapper_deny"
    fi

    if [ "$iptables_result" = "취약" ]; then
        echo "IPtables 규칙:"
        echo "$iptables_rules"
    fi

    echo
}

# U-55 점검
check_U55() {
    echo "=========================="
    echo "U-55 (하)"
    echo "점검 사항: /etc/hosts.lpd 파일의 삭제 및 권한 적절성 점검"
    echo "=========================="

    if [ -e /etc/hosts.lpd ]; then
        echo "/etc/hosts.lpd 파일이 존재합니다."
        
        owner=$(stat -c %U /etc/hosts.lpd)
        permissions=$(stat -c %a /etc/hosts.lpd)
        
        echo "소유자: $owner"
        echo "권한: $permissions"
        
        if [ "$owner" != "root" ] || [ "$permissions" -ne 600 ]; then
            echo "조치가 필요합니다. /etc/hosts.lpd 파일의 소유자 또는 권한이 적절하지 않습니다."
        else
            echo "소유자와 권한이 적절하게 설정되어 있습니다."
        fi
    else
        echo "/etc/hosts.lpd 파일이 존재하지 않습니다."
    fi

    echo
}

# U-56 점검
check_U56() {
    echo "=========================="
    echo "U-56 (중)"
    echo "점검 사항: 시스템 UMASK 값이 022 이상인지 점검"
    echo "=========================="

    result="양호"
    reason="UMASK 값이 022 이상으로 설정되어 있습니다."
    current_umask=$(umask)
    if [ "$current_umask" -lt "0022" ]; then
        result="취약"
        reason="현재 셸 세션의 UMASK 값이 022 이상으로 설정되어 있지 않습니다. (현재 UMASK: $current_umask)"
    fi

    umask_files=(
        "/etc/profile"
        "/etc/default/login"
        "/etc/bashrc"
        "/etc/csh.cshrc"
        "/etc/ksh.kshrc"
        "/etc/profile.d/*"
        "~/.bashrc"
        "~/.profile"
        "~/.cshrc"
        "~/.kshrc"
        "~/.login"
    )

    for file in "${umask_files[@]}"; do
        if [ -f $file ]; then
            file_umask=$(grep -E "umask" $file | awk '{print $2}')
            for umask_value in $file_umask; do
                if [ "$umask_value" -lt "0022" ]; then
                    result="취약"
                    reason="$file 파일에 UMASK 값이 022 이상으로 설정되어 있지 않습니다. (현재 UMASK: $umask_value)"
                fi
            done
        fi
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo ""
    echo "현재 셸 세션의 UMASK 값:"
    umask
    echo ""
    echo "시스템 전체 설정 파일에서 UMASK 값:"
    for file in "${umask_files[@]}"; do
        if [ -f $file ]; then
            echo "$file:"
            grep -E "umask" $file
            echo ""
        fi
    done
    echo
}

# U-57 점검
check_U57() {
    echo "=========================="
    echo "U-57 (중)"
    echo "점검 사항: 홈 디렉터리의 소유자 외 타사용자가 해당 홈 디렉터리를 수정할 수 없도록 제한하는지 점검"
    echo "=========================="

    result="양호"
    reason="모든 사용자 홈 디렉터리의 소유자가 해당 사용자이며, 타 사용자 쓰기 권한이 없습니다."

    awk -F: '{ print $1, $6 }' /etc/passwd | while read user dir; do
        if [ -d "$dir" ]; then
            owner=$(stat -c %U "$dir")
            permissions=$(stat -c %A "$dir")

            echo "사용자: $user, 홈 디렉터리: $dir"
            echo "소유자: $owner, 권한: $permissions"

            if [ "$owner" != "$user" ]; then
                result="취약"
                reason="$dir 디렉터리의 소유자가 $user가 아닙니다."
                echo "$reason"
            fi

            if [ "$(echo $permissions | cut -c9)" != "-" ]; then
                result="취약"
                reason="$dir 디렉터리에 타 사용자의 쓰기 권한이 있습니다."
                echo "$reason"
            fi
            echo ""
        fi
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-58 점검
check_U58() {
    echo "=========================="
    echo "U-58 (중)"
    echo "점검 사항: 사용자 계정과 홈 디렉터리의 일치 여부를 점검"
    echo "=========================="

    result="양호"
    reason="모든 사용자 계정의 홈 디렉터리가 존재합니다."

    awk -F: '{ print $1, $6 }' /etc/passwd | while read user dir; do
        if [ ! -d "$dir" ]; then
            result="취약"
            reason="$user 계정의 홈 디렉터리가 존재하지 않습니다. (설정된 홈 디렉터리: $dir)"
            echo "$reason"
        else
            echo "$user 계정의 홈 디렉터리가 존재합니다. (홈 디렉터리: $dir)"
        fi
    done

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

# U-59 점검
check_U59() {
    echo "=========================="
    echo "U-59 (하)"
    echo "점검 사항: 숨김 파일 및 디렉터리 내 의심스러운 파일 존재 여부 점검"
    echo "=========================="

    hidden_files=$(find / -name ".*" 2>/dev/null)

    if [ -n "$hidden_files" ]; then
        echo "시스템 전체에서 숨겨진 파일 및 디렉터리:"
        echo "$hidden_files"
        echo ""
    else
        echo "시스템 전체에 숨겨진 파일 및 디렉터리가 없습니다."
    fi

    echo "==========================================="
    echo "숨겨진 파일 및 디렉터리를 수동으로 점검하십시오."
    echo "의심스러운 파일이 발견되면 신중히 검토 후 삭제하십시오."
    echo "==========================================="
    echo
}

# 모든 점검 항목 실행 함수
run_all_checks() {
    check_U05 &
    check_U06 &
    check_U07 &
    check_U08 &
    check_U09 &
    check_U10 &
    check_U11 &
    check_U12 &
    check_U13 &
    check_U14 &
    check_U15 &
    check_U16 &
    check_U17 &
    check_U18 &
    check_U55 &
    check_U56 &
    check_U57 &
    check_U58 &
    check_U59 &
    wait
}

# 사용자 입력에 따라 특정 점검 항목 또는 모든 항목 실행
echo "전체 점검을 원하시면 'all'을 입력하고, 특정 점검 항목을 원하시면 'U-xx' 형식으로 입력하십시오:"
read input

case $input in
    "U-05") check_U05 ;;
    "U-06") check_U06 ;;
    "U-07") check_U07 ;;
    "U-08") check_U08 ;;
    "U-09") check_U09 ;;
    "U-10") check_U10 ;;
    "U-11") check_U11 ;;
    "U-12") check_U12 ;;
    "U-13") check_U13 ;;
    "U-14") check_U14 ;;
    "U-15") check_U15 ;;
    "U-16") check_U16 ;;
    "U-17") check_U17 ;;
    "U-18") check_U18 ;;
    "U-55") check_U55 ;;
    "U-56") check_U56 ;;
    "U-57") check_U57 ;;
    "U-58") check_U58 ;;
    "U-59") check_U59 ;;
    "all") run_all_checks ;;
    *) echo "Invalid input. Please enter a valid check ID or 'all'." ;;
esac

echo "=========================="
echo "Script created by: hee "
echo "=========================="
