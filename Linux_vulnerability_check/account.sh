#!/bin/bash

# 계정관리 취약점 점검

check_U01() {
    echo "=========================="
    echo "U-01 (상)"
    echo "점검 사항 : Root 계정의 원격 터미널 접속 차단 설정을 점검" 
    echo "참고 : 이전 버전에서는 telnet도 사용하였지만 보안상 telnet을 사용하는 경우 취약하다고 진단"
    echo "=========================="

    SSH_CONFIG="/etc/ssh/sshd_config"

    result="양호"
    reason="Root 계정의 원격 접속이 적절하게 차단되어 있습니다."

    if grep -q "^PermitRootLogin" $SSH_CONFIG; then
        PermitRootLogin=$(grep "^PermitRootLogin" $SSH_CONFIG)
        if [[ "$PermitRootLogin" != "PermitRootLogin no" ]]; then
            result="취약"
            reason="PermitRootLogin 설정이 'no'로 되어 있지 않습니다."
        fi
    else
        result="취약"
        reason="PermitRootLogin 설정이 sshd_config 파일에 없습니다."
    fi

    if systemctl is-active --quiet telnet.socket; then
        result="취약"
        reason="Telnet 서비스가 활성화되어 있습니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

check_U02() {
    echo "=========================="
    echo "U-02 (상)"
    echo "점검 사항 : 사용자 계정의 패스워드 복잡성 설정을 점검"
    echo "참고 : 이전 버전에서는 /etc/pam.d/common-password 파일에서 pam_unix.so 및 pam_cracklib.so 모듈을 사용하여 패스워드 복잡성 설정을 관리"
    echo "=========================="

    PWQUALITY_CONFIG="/etc/security/pwquality.conf"
    RECOMMENDED_LCREDIT=-1
    RECOMMENDED_UCREDIT=-1
    RECOMMENDED_DCREDIT=-1
    RECOMMENDED_OCREDIT=-1
    RECOMMENDED_MINLEN=8

    result="양호"
    reason="사용자 계정의 패스워드 복잡성 설정이 적절하게 되어 있습니다."

    if [ -f "$PWQUALITY_CONFIG" ]; then
        echo "$PWQUALITY_CONFIG 파일이 존재합니다."

        lcredit=$(grep -E "^lcredit" $PWQUALITY_CONFIG | awk '{print $3}')
        ucredit=$(grep -E "^ucredit" $PWQUALITY_CONFIG | awk '{print $3}')
        dcredit=$(grep -E "^dcredit" $PWQUALITY_CONFIG | awk '{print $3}')
        ocredit=$(grep -E "^ocredit" $PWQUALITY_CONFIG | awk '{print $3}')
        minlen=$(grep -E "^minlen" $PWQUALITY_CONFIG | awk '{print $3}')

        if [[ "$lcredit" != "$RECOMMENDED_LCREDIT" ]]; then
            result="취약"
            reason="lcredit 설정이 권장 값과 다릅니다. (현재: $lcredit, 권장: $RECOMMENDED_LCREDIT)"
        fi

        if [[ "$ucredit" != "$RECOMMENDED_UCREDIT" ]]; then
            result="취약"
            reason="ucredit 설정이 권장 값과 다릅니다. (현재: $ucredit, 권장: $RECOMMENDED_UCREDIT)"
        fi

        if [[ "$dcredit" != "$RECOMMENDED_DCREDIT" ]]; then
            result="취약"
            reason="dcredit 설정이 권장 값과 다릅니다. (현재: $dcredit, 권장: $RECOMMENDED_DCREDIT)"
        fi

        if [[ "$ocredit" != "$RECOMMENDED_OCREDIT" ]]; then
            result="취약"
            reason="ocredit 설정이 권장 값과 다릅니다. (현재: $ocredit, 권장: $RECOMMENDED_OCREDIT)"
        fi

        if [[ "$minlen" != "$RECOMMENDED_MINLEN" ]]; then
            result="취약"
            reason="minlen 설정이 권장 값과 다릅니다. (현재: $minlen, 권장: $RECOMMENDED_MINLEN)"
        fi
    else
        result="취약"
        reason="$PWQUALITY_CONFIG 파일이 존재하지 않습니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

check_U03() {
    echo "=========================="
    echo "U-03 (상)"
    echo "점검 사항 : 사용자 계정 로그인 실패 시 계정 잠금 임계값 설정 점검"
    echo "참고 : 이전 버전에서는 /etc/pam.d/common-auth 파일에서 pam_tally2.so 또는 pam_faillock.so 모듈을 사용하여 계정 잠금 임계값을 설정하였습니다."
    echo "=========================="

    AUTH_CONFIG="/etc/pam.d/common-auth"
    RECOMMENDED_DENY=10
    RECOMMENDED_UNLOCK_TIME=600
    RECOMMENDED_FAIL_INTERVAL=900

    result="양호"
    reason="로그인 실패 시 계정 잠금 임계값이 적절하게 설정되어 있습니다."

    if [ -f "$AUTH_CONFIG" ]; then
        if grep -q "pam_faillock.so" $AUTH_CONFIG; then
            echo "$AUTH_CONFIG 파일에 pam_faillock.so 설정이 존재합니다."

            deny=$(grep "pam_faillock.so" $AUTH_CONFIG | grep -o "deny=[0-9]*" | cut -d= -f2 | head -n 1)
            unlock_time=$(grep "pam_faillock.so" $AUTH_CONFIG | grep -o "unlock_time=[0-9]*" | cut -d= -f2 | head -n 1)
            fail_interval=$(grep "pam_faillock.so" $AUTH_CONFIG | grep -o "fail_interval=[0-9]*" | cut -d= -f2 | head -n 1)

            if [[ -z "$deny" || "$deny" -lt 10 ]]; then
                result="취약"
                reason="pam_faillock.so 모듈의 deny 설정이 권장 값과 다르거나 설정되어 있지 않습니다. (현재: ${deny:-없음}, 권장: 10회 이상)"
            fi

            if [[ -z "$unlock_time" || "$unlock_time" -ne "$RECOMMENDED_UNLOCK_TIME" ]]; then
                result="취약"
                reason="pam_faillock.so 모듈의 unlock_time 설정이 권장 값과 다릅니다. (현재: ${unlock_time:-없음}, 권장: $RECOMMENDED_UNLOCK_TIME)"
            fi

            if [[ -z "$fail_interval" || "$fail_interval" -ne "$RECOMMENDED_FAIL_INTERVAL" ]]; then
                result="취약"
                reason="pam_faillock.so 모듈의 fail_interval 설정이 권장 값과 다릅니다. (현재: ${fail_interval:-없음}, 권장: $RECOMMENDED_FAIL_INTERVAL)"
            fi
        else
            result="취약"
            reason="$AUTH_CONFIG 파일에 pam_faillock.so 설정이 존재하지 않습니다."
        fi
    else
        result="취약"
        reason="$AUTH_CONFIG 파일이 존재하지 않습니다."
    fi

    echo "=== 점검 결과: $result ==="
    echo "이유: $reason"
    echo
}

check_U04() {
    echo "=========================="
    echo "U-04 (상)"
    echo "점검 사항 : 사용자 계정 패스워드 암호화 저장 및 쉐도우 패스워드 정책 적용"
    echo "=========================="

    check_passwd_file() {
        echo "/etc/passwd 파일 점검"
        passwd_check=$(grep -v '^[^:]*:x:' /etc/passwd | grep -vE '^(root|daemon|bin|sys|sync|games|man|lp|mail|news|uucp|proxy|www-data|backup|list|irc|_apt|nobody|systemd-network|systemd-timesync|dhcpcd|messagebus|syslog|systemd-resolve|uuidd|usbmux|tss|systemd-oom|kernoops|whoopsie|dnsmasq|avahi|tcpdump|sssd|speech-dispatcher|cups-pk-helper|fwupd-refresh|saned|geoclue|cups-browsed|hplip|polkitd|rtkit|colord|gnome-initial-setup|gdm|nm-openvpn|gnome-remote-desktop)')
        if [ -n "$passwd_check" ]; then
            echo "취약: /etc/passwd 파일에 패스워드 필드가 x로 설정되지 않은 항목이 있습니다:"
            echo "$passwd_check"
        else
            echo "양호: /etc/passwd 파일의 모든 사용자 계정이 적절히 설정되어 있습니다."
        fi
    }

    check_shadow_file() {
        echo "/etc/shadow 파일 점검"
        shadow_check=$(sudo awk -F: '($2 == "" || $2 == "*" || $2 == "!" || $2 ~ /^\$[156]\\$/) {next} {print $1": NOT OK"}' /etc/shadow | grep -vE '^(root|daemon|bin|sys|sync|games|man|lp|mail|news|uucp|proxy|www-data|backup|list|irc|_apt|nobody|systemd-network|systemd-timesync|dhcpcd|messagebus|syslog|systemd-resolve|uuidd|usbmux|tss|systemd-oom|kernoops|whoopsie|dnsmasq|avahi|tcpdump|sssd|speech-dispatcher|cups-pk-helper|fwupd-refresh|saned|geoclue|cups-browsed|hplip|polkitd|rtkit|colord|gnome-initial-setup|gdm|nm-openvpn|gnome-remote-desktop)')
        if [ -n "$shadow_check" ]; then
            echo "취약: /etc/shadow 파일에 암호화되지 않은 패스워드가 저장된 사용자 계정이 있습니다:"
            echo "$shadow_check"
        else
            echo "양호: /etc/shadow 파일의 모든 사용자 계정 패스워드가 적절히 암호화되어 있습니다."
        fi
    }

    check_passwd_file

    check_shadow_file
    echo
}

check_U05() {
    echo "=========================="
    echo "U-05 (상)"
    echo "점검 사항 : root(UID=0) 계정과 동일한 UID를 가진 계정 존재 여부 점검"
    echo "=========================="

    duplicate_uid_check=$(awk -F: '($3 == 0) {print $1}' /etc/passwd)

    if [ $(echo "$duplicate_uid_check" | wc -l) -gt 1 ]; then
        echo "취약: 다음 계정들이 root(UID=0) 계정과 동일한 UID를 가지고 있습니다:"
        echo "$duplicate_uid_check"
    else
        echo "양호: root(UID=0) 계정과 동일한 UID를 가진 계정이 존재하지 않습니다."
    fi
    echo
}

check_U06() {
    echo "=========================="
    echo "U-06 (상)"
    echo "점검 사항 : su 명령어 사용을 허용하는 사용자를 지정한 그룹 설정 여부 점검"
    echo "=========================="

    check_pam_su() {
        echo "PAM 설정에서 pam_wheel.so 설정 확인"
        pam_wheel_check=$(grep pam_wheel.so /etc/pam.d/su)
        if [ -n "$pam_wheel_check" ]; then
            echo "양호: PAM 설정에서 pam_wheel.so 설정이 존재합니다:"
            echo "$pam_wheel_check"
        else
            echo "취약: PAM 설정에서 pam_wheel.so 설정이 존재하지 않습니다. 모든 사용자가 su 명령어를 사용할 수 있습니다."
        fi
    }

    check_group() {
        group_name=$1
        echo "$group_name 그룹 확인"
        group_check=$(getent group $group_name)
        if [ -n "$group_check" ]; then
            echo "양호: $group_name 그룹이 존재하며, 다음 사용자가 속해 있습니다:"
            echo "$group_check"
        else
            echo "취약: $group_name 그룹이 존재하지 않거나 비어 있습니다."
        fi
    }

    check_pam_su
    check_group "wheel"
    check_group "sudo"
    echo
}

check_U46() {
    echo "=========================="
    echo "U-46 (중)"
    echo "점검 사항 : 패스워드 최소 길이 설정 (8자 이상) 적용 여부 점검"
    echo "=========================="

    check_login_defs() {
        echo "/etc/login.defs 파일 점검"
        minlen_login_defs=$(grep "^PASS_MIN_LEN" /etc/login.defs | awk '{print $2}')
        if [ -z "$minlen_login_defs" ]; then
            echo "취약: /etc/login.defs 파일에 PASS_MIN_LEN 설정이 없습니다."
        elif [ "$minlen_login_defs" -lt 8 ]; then
            echo "취약: /etc/login.defs 파일에 설정된 PASS_MIN_LEN 값이 8자 미만입니다: $minlen_login_defs"
        else
            echo "양호: /etc/login.defs 파일에 PASS_MIN_LEN 설정이 8자 이상으로 되어 있습니다: $minlen_login_defs"
        fi
    }

    check_common_password() {
        echo "/etc/pam.d/common-password 파일 점검"
        minlen_common_password=$(grep -E "pam_pwquality.so|pam_cracklib.so" /etc/pam.d/common-password | grep -oP "minlen=\K\d+" | sort -nr | head -n 1)
        if [ -z "$minlen_common_password" ]; then
            echo "취약: /etc/pam.d/common-password 파일에 minlen 설정이 없습니다."
        elif [ "$minlen_common_password" -lt 8 ]; then
            echo "취약: /etc/pam.d/common-password 파일에 설정된 minlen 값이 8자 미만입니다: $minlen_common_password"
        else
            echo "양호: /etc/pam.d/common-password 파일에 minlen 설정이 8자 이상으로 되어 있습니다: $minlen_common_password"
        fi
    }

    check_login_defs
    check_common_password
    echo
}

check_U47() {
    echo "=========================="
    echo "U-47 (중)"
    echo "점검 사항 : 패스워드 최대 사용 기간 설정 (90일 이하) 적용 여부 점검"
    echo "=========================="

    check_login_defs() {
        echo "/etc/login.defs 파일 점검"
        maxdays_login_defs=$(grep "^PASS_MAX_DAYS" /etc/login.defs | awk '{print $2}')
        if [ -z "$maxdays_login_defs" ]; then
            echo "취약: /etc/login.defs 파일에 PASS_MAX_DAYS 설정이 없습니다."
        elif [ "$maxdays_login_defs" -gt 90 ]; then
            echo "취약: /etc/login.defs 파일에 설정된 PASS_MAX_DAYS 값이 90일 초과입니다: $maxdays_login_defs"
        else
            echo "양호: /etc/login.defs 파일에 PASS_MAX_DAYS 설정이 90일 이하로 되어 있습니다: $maxdays_login_defs"
        fi
    }

    check_login_defs
    echo
}

check_U48() {
    echo "=========================="
    echo "U-48 (중)"
    echo "점검 사항 : 패스워드 최소 사용 기간 설정 (1일 이상) 적용 여부 점검"
    echo "=========================="

    check_login_defs() {
        echo "점검: /etc/login.defs 파일"
        mindays_login_defs=$(grep "^PASS_MIN_DAYS" /etc/login.defs | awk '{print $2}')
        if [ -z "$mindays_login_defs" ]; then
            echo "취약: /etc/login.defs 파일에 PASS_MIN_DAYS 설정이 없습니다."
        elif [ "$mindays_login_defs" -lt 1 ]; then
            echo "취약: /etc/login.defs 파일에 설정된 PASS_MIN_DAYS 값이 최소 사용 기간에 부합하지 않습니다: $mindays_login_defs"
        else
            echo "양호: /etc/login.defs 파일에 PASS_MIN_DAYS 설정이 최소 사용 기간에 부합합니다: $mindays_login_defs"
        fi
    }

    check_login_defs
    echo
}

check_U49() {
    echo "=========================="
    echo "U-49 (하)"
    echo "점검 사항 : 시스템 계정 중 불필요할 수 있는 계정 존재 여부 점검"
    echo "/etc/passwd 파일과 Log파일(/var/log/wtmp, /var/log/sulog)을 통한 수동 점검 권장"
    echo "=========================="
    echo
}

check_U50() {
    echo "=========================="
    echo "U-50 (하)"
    echo "점검 사항 : 시스템 계정 중 불필요할 수 있는 그룹 존재 여부 점검"
    echo "/etc/group 파일을 통한 수동 점검 권장"
    echo "=========================="
    echo
}

check_U51() {
    echo "=========================="
    echo "U-51 (하)"
    echo "점검 사항 : /etc/passwd 파일 내 UID가 동일한 사용자 계정 존재 여부 점검"
    echo "=========================="

    duplicate_uids=$(awk -F: '{print $3 " : " $1}' /etc/passwd | sort | uniq -d -f 1)

    if [ -z "$duplicate_uids" ]; then
        echo "양호: /etc/passwd 파일 내 동일한 UID를 가진 사용자 계정이 없습니다."
    else
        echo "취약: /etc/passwd 파일 내 동일한 UID를 가진 사용자 계정이 존재합니다:"
        echo "$duplicate_uids"
    fi
    echo
}

check_U53() {
    echo "=========================="
    echo "U-53 (하)"
    echo "점검 사항 : 로그인이 불필요한 계정에 쉘 부여 여부 점검"
    echo "/etc/passwd 파일을 통한 수동 점검 권장"
    echo "=========================="
    echo
}

check_U54() {
    
    echo "=========================="
    echo "U-54 (하)"
    echo "점검 사항 : Session Timeout 설정 여부 및 값 점검 (/etc/profile)"
    echo "=========================="

    file="/etc/profile"

    if [ -f $file ]; then
        tmout_value=$(grep -i 'TMOUT' $file | awk -F= '{print $2}')
        
        if [ -z "$tmout_value" ]; then
            echo "취약: $file 파일에 TMOUT 설정이 없습니다."
        elif [ "$tmout_value" -gt 600 ]; then
            echo "취약: $file 파일에 설정된 TMOUT 값이 600초(10분) 초과입니다: $tmout_value"
        else
            echo "양호: $file 파일에 설정된 TMOUT 값이 600초(10분) 이하입니다: $tmout_value"
        fi
    else
        echo "경고: $file 파일이 존재하지 않습니다."
    fi

    echo
    echo "조치 방법: /etc/profile 파일에 TMOUT=600 이하로 설정하십시오. 예: export TMOUT=600"
    echo
}

# Function to run all checks
run_all_checks() {
    check_U01
    check_U02
    check_U03
    check_U04
    check_U05
    check_U06
    check_U46
    check_U47
    check_U48
    check_U49
    check_U50
    check_U51
    check_U53
    check_U54
}

# Prompt the user for input
echo "전체 점검 명령어 : all, 부분 점검 : U-01, U-02..."
read input

case $input in
    "U-01") check_U01 ;;
    "U-02") check_U02 ;;
    "U-03") check_U03 ;;
    "U-04") check_U04 ;;
    "U-05") check_U05 ;;
    "U-06") check_U06 ;;
    "U-46") check_U46 ;;
    "U-47") check_U47 ;;
    "U-48") check_U48 ;;
    "U-49") check_U49 ;;
    "U-50") check_U50 ;;
    "U-51") check_U51 ;;
    "U-53") check_U53 ;;
    "U-54") check_U54 ;;
    "all") run_all_checks ;;
    *) echo "Invalid input. Please enter a valid check ID or 'all'." ;;
esac

echo "=========================="
echo "Script created by: hee"
echo "=========================="
